{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOQ0jSetwd28MKGZ9kd1NO2",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Sushmitha-C27/CODTECH--TASK1/blob/main/AIpynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        },
        "id": "HsIzX409Q0lH",
        "outputId": "fff92d8f-6b53-41d8-ec1e-ac351f50529c"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-7a21afa1-8b0a-4a8d-8bed-888f1fd55375\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-7a21afa1-8b0a-4a8d-8bed-888f1fd55375\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving Sample_dataset - Sheet1-2.csv to Sample_dataset - Sheet1-2.csv\n"
          ]
        }
      ],
      "source": [
        "from google.colab import files\n",
        "\n",
        "# Upload the file\n",
        "uploaded = files.upload()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "This line imports the files module from the google.colab library, which provides functionalities for file upload and download.The uploaded files are stored in the uploaded variable as a dictionary, where the keys are the file names and the values are the file contents."
      ],
      "metadata": {
        "id": "zOAffnx7YzPU"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "gSXNx4OaYmIs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Load your dataset after uploading\n",
        "df = pd.read_csv(\"Sample_dataset - Sheet1-2.csv\", delimiter=',', header=0)\n",
        "\n",
        "# Display all column names to diagnose\n",
        "print(\"Available columns in the DataFrame:\")\n",
        "print(df.columns.tolist())\n",
        "\n",
        "# Display the first few rows of the DataFrame\n",
        "print(df.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LOk2ysN1RJvQ",
        "outputId": "c6288069-3a59-4257-9dbb-ae2e8c7cdb78"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Available columns in the DataFrame:\n",
            "['Name,Age,Gender,Salary,City']\n",
            "       Name,Age,Gender,Salary,City\n",
            "0   Alice,28,Female,72000,New York\n",
            "1    Bob,34,Male,48000,Los Angeles\n",
            "2    Charlie,22,Male,54000,Chicago\n",
            "3   Diana,45,Female,90000,New York\n",
            "4  Eve,29,Female,61000,Los Angeles\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "This line loads the CSV file Sample_dataset - Sheet1-2.csv into a Pandas DataFrame named df.\"Sample_dataset - Sheet1-2.csv\": The name of the file to be loaded (ensure this file is uploaded to the Colab environment beforehand).\n",
        "delimiter=',': Specifies that the values in the CSV file are separated by commas.\n",
        "header=0: Indicates that the first row of the CSV file contains the column headers."
      ],
      "metadata": {
        "id": "DezGQMWhZPli"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# EDA: Display the first few rows of the dataset\n",
        "print(df.head())\n",
        "\n",
        "# Check data types and missing values\n",
        "print(df.info())\n",
        "\n",
        "# Summary statistics for numerical columns\n",
        "print(df.describe())\n",
        "\n",
        "# Visualizing missing values (optional)\n",
        "import missingno as msno\n",
        "msno.matrix(df)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "FckyQ7RZRTAu",
        "outputId": "13035aad-a342-4e10-a3e1-bd9c5265af48"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "       Name,Age,Gender,Salary,City\n",
            "0   Alice,28,Female,72000,New York\n",
            "1    Bob,34,Male,48000,Los Angeles\n",
            "2    Charlie,22,Male,54000,Chicago\n",
            "3   Diana,45,Female,90000,New York\n",
            "4  Eve,29,Female,61000,Los Angeles\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 10 entries, 0 to 9\n",
            "Data columns (total 1 columns):\n",
            " #   Column                       Non-Null Count  Dtype \n",
            "---  ------                       --------------  ----- \n",
            " 0   Name,Age,Gender,Salary,City  10 non-null     object\n",
            "dtypes: object(1)\n",
            "memory usage: 208.0+ bytes\n",
            "None\n",
            "           Name,Age,Gender,Salary,City\n",
            "count                               10\n",
            "unique                              10\n",
            "top     Alice,28,Female,72000,New York\n",
            "freq                                 1\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 3
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2500x1000 with 2 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAB94AAAQiCAYAAADtQ1ZFAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAABrVUlEQVR4nOzdZ5RV5f334e+ZGaqiKChYsLcIij2iEOxGNKJJLI8tmsSuiWLBLqKIDWyxG2PsGo0aTWwodlFAsJdgR7FgQwVkZs55XvDnBCyJyVaGcl1ruWTOLtz75fA592+XKpVKJQAAAAAAAADA/6SmqRcAAAAAAAAAALMz4R0AAAAAAAAAChDeAQAAAAAAAKAA4R0AAAAAAAAAChDeAQAAAAAAAKAA4R0AAAAAAAAAChDeAQAAAAAAAKAA4R0AAAAAAAAAChDeAQAAAAAAAKAA4R0AAAAAAAAAChDeAQAAAAAAAKAA4R0AAAAAAAAAChDeAQAAAAAAAKAA4R0AAACAqkql0tRLAAAAmO0I7wAAAAAkSRobG1MqlZIkU6ZMSSLEAwAAfBfCOwAAAABJktra2iTJgQcemFNPPTVJqiEeAACAb1eq+NoyAAAAAJm6u33EiBH58Y9/nBVXXDFDhgzJYost1tTLAgAAmOXZ8Q4AAABAkqm729dee+1sueWWGTduXF555ZUkSblcbuKVAQAAzNqEdwAAAACSTN3xXqlUss4662TChAk57bTTUl9fn5oa/4QEAADw7xg1DwAAAMAMxo8fn27dumXy5Mm59957s8IKK6RSqXjfOwAAwLfwdWUAAACAuUxjY+MMP08/Sr5cLqdt27bZfPPN8/bbb+cvf/lLkojuAAAA/4bwDgAAADCXqa2tTZI88sgjSf4V1cvlcmpqalJXV5df/OIXSZLrr78+b775ZtMsFAAAYDYhvAMAAADMhQ4//PD06NEjW2yxRc4444y89dZbM7zLfYMNNsi2226bF198MS+++GKSqe+ABwAA4OuEdwAAAIA50FcjeX19ffXP77zzThZffPGsuOKKeeyxx9K3b9+sueaaOeyww3L77bcnmboLfvPNN09DQ0NOP/30fPrpp8bNAwAAfItSxVeVAQAAAOYo00bGJ8mnn36aNm3aVH8+9thj07p16xx55JH58MMP8/LLL+f888/Pgw8+mLfeeitJsvXWW2ezzTbLlltumW222SYff/xx7r777qywwgoz3BsAAICphHcAAACAOdSGG26Y5ZZbLmeccUbmn3/+HHbYYRk0aFB+9atf5Ywzzki7du2q577yyiu57777ctlll+W5557L559/nk6dOuXLL7/M+++/nwMOOCDnnHNOEz4NAADArEt4BwAAAJgDPfDAA9lkk03S2NiY448/PuPGjcvFF1+cHXbYIccee2xWXnnlJPnaDvb3338/b731VgYNGpRnn302zz77bGpqarLaaqvl9ttvT8eOHZvqkQAAAGZZwjsAAADAHKShoSF1dXVJkptvvjl9+vTJG2+8kST52c9+ltNOOy0rrrhiKpXKDO9s/+rPDQ0N+fDDD3P11VfnmmuuyZNPPpkbbrghv/zlL2fuAwEAAMwGvJALAAAAYA7w9NNPp7GxMXV1dZkyZUqSZNttt83SSy+d2traJMlCCy2UJZdcMklmiOxf/blSqaSuri4dOnRInz59sv/++ydJ/vznP2fKlCkpl8sz45EAAABmG8I7AAAAwGxu+PDhWW211bLyyiunUqmkefPmqVQqef755/P000/nRz/6UTp06JDLLrssxx13XN57771/e79pEX7aoMTtttsuK620UkaOHJlJkybNMJoeAAAA4R0AAABgtrfYYoulVCpl3nnnzRdffJFkajzv1KlT7rrrrgwZMiSXXnppFltssZxxxhkZNGhQPvjgg+r10+9gb2xsrP55Wnhv1apVWrRokSlTpuTzzz+fSU8FAAAw+xDeAQAAAGZD06J4Q0NDFl100YwfPz5Dhw7NvPPOm4svvjgNDQ1p06ZNOnfunIUXXjhbbrllzjjjjGp8P/300/P+++8nSXUH+1NPPZVbbrkl48aNm+HzP/3pT3n++eez4oorpk2bNk3wtAAAALM24R0AAABgNjRtHHxdXV2SZIEFFsh8882X0047Lfvss0822WSTNDY2pmXLlvnyyy+TJDvssEMGDRpUje9nnHFG3n333STJ6NGjc9BBB2XXXXfN2LFjq3/Pa6+9lquuuiqNjY259NJLM998883kJwUAAJj1lSrTvh4NAAAAwGzhgw8+yMsvv5ybbropnTp1ysEHH1w9Nnbs2PTo0SNvvPFGNtxww9x9992pra3Nl19+mRYtWiRJbrjhhhx66KEZO3Zs9thjjyy55JL5+9//nuHDh+fEE0/M0UcfXb3f559/nttuuy1rrLFGVlxxxZn+rAAAALMD4R0AAABgNjJy5Mj069cv99xzT6ZMmZIePXqkf//+6dmzZxoaGlJXV5dx48alR48eefXVV781vt90000ZMGBARo8enWTqe9wHDhyY3/3ud0mmvvd92qj5SqVS3WEPAADA1wnvAAAAALOJ++67L9tvv30+//zz7Lbbbtltt93SuXPntGnTpjpyvrGxMbW1tXnnnXfyk5/85N/G99GjR2fUqFH5+OOPs+aaa6Znz55JZozuAAAA/GfCOwAAAMBs4JFHHsmmm26aRRddNEcffXT22GOP6rGvhvJpO9+/S3z/KtEdAADgvye8AwAAAMzixowZk1/84hd55513cu6552bHHXdM8q/d7d/kP8X3+vr6NGvWbGY+BgAAwBzL15cBAAAAZlHT9kvcfvvteeaZZ/Lb3/62Gt3L5fK3RvckqaurS2NjYxZddNE8+OCDWWaZZTJ06NBsscUWaWxsTLNmzWI/BgAAwPfDjncAAACAWVi5XE737t0zZsyYPPXUU1lkkUX+q3Hw07/zfaONNsrLL7+cNddcM8OHD/+BVw4AADD3sOMdAAAAYBY2ZsyYPPfcc5l//vmr72X/rtH9yy+/rO6KX3TRRXPfffdlwQUXzGabbfaDrRcAAGBuVNfUCwAAAADg2zU0NKRcLmfeeedNmzZt/qtrX3755Tz44IPZf//9k0yN72+++WZat26dZOoo+1Kp9L2vGQAAYG5jxzsAAADALKxFixYplUp56qmnctddd32na6a9WfCOO+5I//79c/fddyeZOra+VatW1T+L7gAAAN8P4R0AAABgFrbYYoulR48eqa2tzaOPPppyufxvz59+F/vIkSMzadKkrLDCCkmmjqifduy7jqsHAADgP/MbFgAAAMAsrGXLlll//fXT2NiYU089NbfffnuSf+1qn9700f2vf/1rbrzxxmy//fbp1KnTN54PAADA90N4BwAAAJhFTYvlRx11VLbddttUKpVsu+22uffee2cYE9/Y2DjD6Phhw4Zl4MCBWWCBBbLjjjumtrbWWHkAAIAfkPAOAAAAMIsqlUrV0fJ9+vTJBhtskEqlks022yxXXXVV3n333SRJbW1tdXT8Pffck759+2bkyJE58cQTs8kmmzTZ+gEAAOYWpYo5YwAAAACzvPr6+tx///05/fTTM2TIkJRKpWy55ZZZb7310q1bt4wdOzZPP/10zj777DQ2Nub000/PQQcdlCQpl8ve6Q4AAPADEt4BAAAAZhMNDQ155ZVXMnDgwFxxxRVfO15bW5uuXbvm8MMPz/bbb59EdAcAAJgZhHcAAACAJvTVMF6pVL7T+9hvueWWvPjii3nooYcy33zzpWXLltlpp52yzDLLZNlll/3GewMAAPDDEN4BAAAAmsj0YfzZZ59Nly5d/qtrkqkj6Js1a/Y/B3wAAACK85VnAAAAgCYyLZQfddRR+f3vf59kajD/LtdMU1tbmyRfi+yiOwAAwMxjxzsAAABAE3r99dez3nrr5d13380TTzyRtdZa6xvPm7azPbGbHQAAYFZjxzsAAABAE1pqqaWy6667JkmuvfbaNDQ0pFwuf+28Zs2apVKp5KCDDsqDDz6YJN94HgAAADOf8A4AAADQRKaF85133jkLLbRQhgwZki+//PJr4+Sn+dnPfpZzzjknAwcO/No73QEAAGg6fjsDAAAAaCLTwvnyyy+fzp0755lnnsmFF174recPGDAgCy64YO6+++78/e9/n1nLBAAA4D8Q3gEAAAB+YI2NjV/7bNpu93K5nFatWqVv375p2bJlhg8f/q336Nq1ay688MLU1tZm1KhRP+iaAQAA+O6EdwAAAIAfWG1tbZLk1ltvzVNPPTXDOPmamppUKpUst9xyWXzxxXPDDTfkrrvu+tZ79OjRI+uuu25uvPHGfPbZZ97zDgAAMAsQ3gEAAAB+INPvdD/yyCOz7bbbZtNNN03v3r1z33335dVXX02SlEqlLLvsstljjz2SJPfdd1+SfGNU79ChQ37729/mzDPPTJs2bbznHQAAYBZQqlQqlaZeBAAAAMCcplwuV6P4888/n7Fjx+a+++7L7bffnueffz4tW7bMwgsvnIMPPjjrrLNOunXrlpdffjk9e/ZMTU1Nhg8fnkUXXXSGe1YqlZRKpW/9GQAAgKbhK9EAAAAAP4Bp0b1Pnz7p0qVLvvjii5xyyikZNmxYLrzwwvziF7/Im2++mYMPPji9evXKLrvskjfeeCOdOnXKuHHjctVVV6VSqcyw6/2rkV10BwAAmDXY8Q4AAADwA7nyyitz4IEHZvXVV8/AgQOz7rrrznD83nvvzfDhw3PRRRfljTfeyEILLZRyuZwPP/wwvXv3zs0339xEKwcAAOC/IbwDAAAAfE8aGhpSV1dX/XmXXXbJyJEjc9NNN2XllVdOMnU8fDLjbvX3338/Q4YMyY033pghQ4bk888/T5LccMMN+eUvfzkTnwAAAID/hVHzAAAAAN+TadH9qKOOyp133pnPP/88u+22W1ZeeeXqyPhSqTRDdC+Xy1l44YWz00475a9//WtuvvnmHHPMMUmSESNGJPlXrAcAAGDWZMc7AAAAwPfolltuyc9//vMkyXzzzZff//73OeGEE/7jdY2NjamtrU2SjBw5MhtvvHFqamoyevToLLHEEj/omgEAACjGjncAAACA79E222yT3/72t0mSzz77LG+99VYmT578H3etT4vuSbLmmmtm0003zSeffJKxY8f+oOsFAACgOOEdAAAA4HvS0NCQJLn44ovz29/+NpVKJVdccUWGDBmSUqlUHTf/baaP89NG0n/55Zc/6JoBAAAoTngHAAAAKGhaUK+rq0t9fX2SqfF97733TrlczrbbbptHHnkkNTU1/za+T3v3+6WXXpohQ4Zk5ZVXzsorr/zDPwAAAACFCO8AAAAA/6WvxvPpd6o3a9YskydPTpJccMEF2WeffdLY2JgNNtjgO8X3hoaGXH/99fnkk09y3XXXpUOHDj/MQwAAAPC9KVX+0wvGAAAAAKhqbGysvo/973//ex5//PHcd999WX/99bP66qtnxx13TJJMnjw5LVu2TJLst99+ufDCC1NbW5v7778/66+/fsrlcmpqvnlPxGeffZZ33303yy+//Mx5KAAAAAoR3gEAAAC+o+ljeb9+/XLKKadkypQpM5yz995754ILLkiSTJo0Ka1atUryr/jeokWL3H333enRo8c3/h0NDQ2pq6v7AZ8CAACA75tR8wAAAADfQaVSqUb3Y445Jv3798+qq66aW2+9NWPGjMmNN96Yli1b5qKLLsoOO+yQJGnVqlUmTZqUJDn//POz//7758svv0zPnj0zbty4fNN+CNEdAABg9uM3OQAAAIDvoFQqJUkuu+yynHnmmenVq1dOOumkrLbaapkyZUqGDBmSmpqa1NXV5S9/+UuaN2+eK6+8shrfW7VqlXPPPTcTJkzIUkstlUUWWaSJnwgAAIDvi1HzAAAAAN/R66+/nh122CHjx4/PlVdemfXWWy9TpkzJOeeck+OPPz6LL754zjvvvPz85z/P559/nh122CHXXnttkhnHzk/z797zDgAAwOzDb3YAAAAA03nsscdy++23p76+/mvH3nvvvbzwwgs59NBDs95666WhoSF/+tOfctJJJ6Vjx4554IEHsskmm+Tkk09O8+bNc/3112fnnXdOMnXsfGNjY/Ve04+uBwAAYPZmxzsAAADA/3n55Zez0korpW3btrnyyiuz2WabpVmzZtXj7777bh577LH07NkzCy64YIYPH57ddtstEydOzAMPPJCllloqSfLwww9ngw02SPPmzTN58uRsvfXWueWWW5rmoQAAAPjB+Vo1AAAAwP/p1KlTfvWrX+XTTz/NfvvtlzvvvHOGne8dO3ZMr169suCCCyZJrr322rz00ks566yzstRSS2XKlClJktVXXz1rrLFGjjvuuCRJly5dZv7DAAAAMNPY8Q4AAACQf71vfdKkSTnkkENy4YUXplOnTvnDH/6Qn/70pzPsfE+Szz//PGuuuWY+/vjjjBgxIksssUQqlUpKpVKuvfba7Lzzzhk7dmzatm2b1q1bJ0n1OAAAAHMWO94BAAAAktTU1KRcLqdVq1YZNGhQ9tlnn7z11ls54IADvrbzfVpAL5VKGT9+fJ5//vkkSalUyrBhw3LeeedllVVWSX19fVq1apVkatgX3QEAAOZMwjsAAADA/6mpqUljY+N/jO+lUinzzDNPdttttyTJb37zm5x55pk5/fTTs/vuu+fRRx/NAQcckCWXXLIa22tq/DMMAADAnMqoeQAAAICv+K5j5z/88MMcc8wxueiii6rXtmrVKqeffnr222+/JMbLAwAAzA2EdwAAAID/M30kb2hoSF1d3X+M7+VyOVdddVVGjRqV5ZdfPl27ds36669fPWanOwAAwJxPeAcAAADmWl8N41/dnT5lypQ0b978G+P75ptvnubNm3/newMAADDnEt4BAACAuVJjY2Nqa2uTJHfccUdGjx6d+++/P927d88666yTzTffPMl33/lupDwAAMDcS3gHAAAA5jrT70bv379/Tj311EyePDnT/zPJaaedlkMPPTTJvyL99PF96aWXzuDBg9OrV69qfAcAAGDuZN4ZAAAAMFepVCrV6H700UenX79+WW655XLttdfmueeey7nnnpskOfzww3PsscemUqmktrY2jY2NadWqVQYNGpT9998/r732WnbbbbeMHTu2KR8HAACAWUBdUy8AAAAAYGaaNg7+j3/8YwYPHpytttoq/fr1yxprrJH6+vo8+uijad26dSZOnJgBAwakrq4uxx577Azx/dRTT81nn32Wrl27Zumll27iJwIAAKCpGTUPAAAAzHXGjBmTHXfcMZ9++mmuvPLKrLvuuqmvr8+ZZ56ZE044IYsvvngOOeSQ7LPPPkmS4447Lscdd1xqamqq73yf/h3x04+uBwAAYO5jxzsAAAAwR5o0aVIaGhoyzzzzfC2Kv/XWW3nyySfzxz/+Meuuu24aGhpy6aWXZsCAAenYsWMeffTRtGvXLu+9916OP/749O/fP+VyOSeccELq6uqq4+eTGUfXAwAAMHfyWyEAAAAwx3n11VczcODA7LnnnnnsscfS2Ng4w/GuXbvmuuuuy1ZbbZUkGT58eM4888y0bds2Q4cOTbt27VIul9OjR4+0aNEi88wzT0466aQcdthhSf41rv6rfwYAAGDuZMc7AAAAMEcZNmxYfve732XEiBFZeumlM27cuHz1TXsLLrhgttlmmzRv3jxJct1112XMmDH5xz/+kSWWWCJTpkxJ8+bN07lz5yyxxBL5yU9+kj/+8Y9p3759UzwSAAAAszjveAcAAADmGPfdd1+23377NGvWLHvuuWeOO+64JEld3TfvPahUKvnggw+yxhpr5Msvv8yoUaPSsWPH6vmXX3559txzz7z77ruZPHlyFltssZn2LAAAAMw+jJoHAAAA5gjDhg3LVlttlbZt2+bMM89M//79U1dXl9ra2q/teJ+mVCqldevWWXDBBfP555+nvr6+Gt2HDRuWSy+9NKuuumq+/PLLLLLIIkmScrk8054JAACA2YNR8wAAAMBs7+23385hhx2W+vr6HHvssdlxxx2TTI3kpVLpW9/DXi6XM++882adddbJs88+m4022ij9+/fP+++/n8suuywvvPBCLrnkkiy66KLVa2pq7GMAAABgRkbNAwAAALO9oUOH5mc/+1m23XbbXHnllUmSxsbG1NbWVs958cUX88477+Thhx9Ou3btssUWW2SZZZZJkkyaNCnbbbdd/vGPf1TPb968eQYPHpz99tsvydSx9N8W8AEAAJi72fEOAAAAzPZuv/32TJw4MUsttVSSZMqUKWnevHmSqVH95ptvTt++ffPFF1/kk08+SZIsvPDCOe+887LVVlulVatWue2223Lqqadm7NixWWaZZbL66qtnww03TDJ1Z7yd7gAAAHwb4R0AAACY7S2++OJJkvfffz/lcrka3e+///7ceOONOf/885Mkyy+/fDp27JhSqZQXXngh++67bzp06JDu3bunVCrliCOO+Nq9RXcAAAD+E+EdAAAAmO1Newf7JZdckvbt22eVVVbJiBEjctttt+Wf//xnkqRv377ZY4890q5duzQ0NORXv/pV7r777vTp0ycPPPBAWrRo8Y2BXXQHAADgP/GOdwAAAGCOcNhhh2XQoEFJkmbNmqW+vj4tWrRI9+7d85vf/CY77rjjDOe/8MIL6dmzZxZccME8+eSTad26dVMsGwAAgDmAHe8AAADAbG3aKPjTTz8988wzT6688srU1NSkVatW6du3b9Zcc82stNJK1XOTqbvY6+rq8tlnn6Vly5bVzwEAAOB/IbwDAAAAs7XpR8H369cvv/71rzPPPPOkVCplwQUXrB6rVCoplUoplUpJkocffjhffvlldtxxx8w777ze5Q4AAMD/THgHAAAA5gjTwnmnTp2qcX1abJ9m+uh+yimnpF27dtlyyy2TeJc7AAAA/zvhHQAAAJgjTAvnXw3tX93p/uCDD+b444/PP//5z1xwwQXp2bNnk6wXAACAOYfwDgAAAMwW/pdR8F/d8X7ZZZdl4MCBeeONNzJ48ODsvffe33geAAAA/DeEdwAAAGCW19jYmNra2iTJm2++mUUXXTR1df/5nzWmxfSDDz44Tz/9dIYOHZolllgif/zjH7Prrrsm+d+CPgAAAEzPb5UAAADALK1SqVSj+4EHHpgNN9wwjz/+eCqVyne+x8SJEzN06ND87ne/y9VXXy26AwAA8L0qVf6b31IBAAAAmsj555+fPn36ZJVVVsmf/vSndOnS5RvPm353/PT++c9/plOnTmnZsmUS4+UBAAD4/gjvAAAAwCxp+oBeX1+frbfeOp999lkuvvjirLzyyv/2mkqlktGjR6dz585p3rz5zFw2AAAAcyGz1AAAAIBZ0rTofs011+Sll17KU089lV133fVbo/u0ayqVSpZddtn06tUro0ePTjJ1pDwAAAD8UIR3AAAAYJY1ePDg7LLLLtljjz1SKpWy7LLLJvn3IX38+PF577338t577+Wss85KEu9xBwAA4Aflt04AAABglrXxxhtn+eWXz8iRIzNu3Ljcd999aWho+NaQXi6Xs9BCC+W5557LoosumhEjRmTChAkzedUAAADMbYR3AAAAYJZULpfTtWvX3HTTTVlxxRWTJPfdd19eeeWVb72mpqYmjY2NWWqppXLIIYdkzJgxGTJkyMxaMgAAAHMp4R0AAABocpVK5WuflUqllMvldOnSJX/5y1+y0kor5Yknnsihhx6aDz/88FvvNe3d8N27d89KK62UhRde+AdbNwAAACRJqfJNv9kCAAAAzCTlcrk6Or6hoSGfffZZyuVy2rVrN8N5zz33XLbbbru8+OKL+dnPfpbLLrvsa+d81bhx47LIIov8YGsHAACARHgHAAAAmlBjY2N1h/oVV1yRu+66K8OHD0+5XM6GG26Ynj17Zpdddqme/13je6VSSalUqv4fAAAAfkjCOwAAANAkpt/pfuSRR+bUU09N8+bNs+KKK+bDDz/MuHHjUqlUctBBB2Xw4MHV66aP79tuu20uuuiitG/fvqkeAwAAALzjHQAAAGga06L7qaeemlNPPTWbbbZZ7r333jz11FN58skn8/e//z1JctZZZ+Wiiy5KMnWHfOfOnfOXv/wlXbp0yc0335ztt98+kydPbrLnAAAAAOEdAAAAaDKjR4/O2WefnZVXXjmnn3561l9//STJwgsvnKeffjpJ0rt373Tp0iVJqmPpO3funGuuuSYdO3bMRhttlJYtWzbNAwAAAECSuqZeAAAAADB3+Kb3rb/44ot59913c/LJJ2eVVVapfn7CCSfkhBNOSK9evXL88cdntdVWS5KMHTs2iy++eJKkS5cuefbZZ7Pgggt+6/0BAABgZrDjHQAAAPjBjBw5MrfeemuSpFQqpVKpJEn1/6NGjUqSdOzYsXpN//79q9F9wIAB1eg+fvz4nHPOOXnooYeq5y6wwAJJpr4vXnQHAACgqdjxDgAAAPwgXnrppXTr1i3LLbdcSqVStt5662p8nxbJ27RpkyTVd7Qfd9xxOemkk6rRvWvXrtX7XX755Rk0aFA233zz6mfT7jPtffEAAADQFIR3AAAA4AdRLpez3Xbb5ZZbbsmAAQNSqVTSu3fvlEqlNDY2pra2NiuuuGKS5JxzzsmoUaNy0kknZYsttvhadL/33ntz5plnZv31188KK6zQVI8EAAAA36hUmTbbDQAAAOB79uKLL2bQoEH585//nNVXXz1HHXVUevfuXT0+YcKE9OjRI88880xqamqy6aab5vzzz8/SSy9dPefRRx/NMccck1GjRuXSSy/NL37xi6Z4FAAAAPhW5rABAAAAP5iVVlopBx10UHbbbbeMHj06AwYMyM0331w9Pt988+Xiiy9Op06dUi6X8/nnn2fRRRfNxIkT09DQkJtuuil777137r///vTv378a3e0jAAAAYFZixzsAAADwvZs2Sn6aO+64I1deeWWuu+66bLjhhtl///3z85//PEkyZcqUDBkyJPvvv3/eeOONLLnkkllooYUyefLkPPvss2nTpk1OPvnk7L///kmmjrD3TncAAABmJcI7AAAA8L2aPowPGjQot9xyS5566qm0atUqH3zwQZKke/fu6dOnT7bZZpvqda+99lqOPPLIvPDCC3n77bcz33zzpXfv3unVq1c23XTTr90bAAAAZhV1Tb0AAAAAYM4yLYwfeeSROfXUU7PeeuvloosuSrt27fLMM8/kkksuycMPP5wpU6YkSTW+L7300rn66qszceLEfPzxx5lvvvnStm3b6n1FdwAAAGZVdrwDAAAA37sbbrghO+64Y3r06JHzzjsvXbp0qR4bNmxYzjrrrNx4441ZZ511cthhh2XbbbdN8vW4XqlUUiqVZvr6AQAA4L9hxzsAAADwvRs+fHiS5PDDD0+XLl1SqVRSLpdTW1ubddddN3379s2ECRNy55135txzz025XM4vfvGL1NTUzBDfRXcAAABmB8I7AAAA8L1pbGxMpVLJgw8+mCRp3rx59VhtbW31z6uvvnr233//3Hnnnbn//vvT2NiYJNX4DgAAALMT4R0AAAD43kyL62ussUaGDx+eN998M0mqu92Tf42P33LLLbP22mvno48+ykMPPZRx48Zl9dVXzzLLLNNk6wcAAID/hfAOAAAAfO+WWmqpJMlJJ52UzTbbLJ06dfra+9uTZMqUKenatWt+/OMfZ5111hHdAQAAmC2VKpVKpakXAQAAAMxevimiJ1NHzdfW1qa+vj6bbrppHnzwwfz0pz/NhRdemCWWWKJ6PEmGDh2a3r17589//nN69eqVFi1aJPnXjngAAACYXXhpGgAAAPBfaWxsrEb3Z555JiNGjMjQoUOT/GvUfLNmzXLUUUelc+fOufPOO/PLX/4yo0ePzmeffZYkuf/++zNw4MA0b948HTp0EN0BAACYrdnxDgAAAHxn0+90HzhwYM4777yMHz8+U6ZMydZbb5299947G2ywQVq1apUvvvgid999d04++eSMHDky8847b5Zffvm0b98+Q4cOTUNDQ84666z87ne/a+KnAgAAgGKEdwAAAOC/dvTRR2fgwIFZYIEF0r179zzxxBN57733stJKK+Xggw/OTjvtlHnmmSeTJ0/OW2+9leOPPz4PPfRQ3n777bRt2zZLLLFEDjrooOy+++5Jvn10PQAAAMwOhHcAAADgP5p+BPwDDzyQn//85+nZs2eOPfbYrL766nnxxRdz7rnn5sorr0y7du1yxBFHZJdddsk888xTvccrr7ySd999N+3bt0/r1q3TqVOnJKI7AAAAs7+6pl4AAAAAMGubPoxXKpU8//zzqampyfHHH5+uXbumXC5npZVWylFHHZX27dvn7LPPzqmnnpok2XXXXdO6deskybLLLptll122ep9p/xfdAQAAmN0J7wAAAMC/NS2MH3744amvr8/EiROzySabpGvXrmloaEhtbW2SZLHFFsu+++6bSqWSc845J6ecckqSZLfddkurVq1mCPjTds9P+z8AAADMzoR3AAAA4D8aPXp0Bg8enHK5nPnnnz/rr79+kqSubsZ/WujYsWP222+/lEqlnH322TnjjDPS2NiY3XffvbrzHQAAAOY0ZrkBAAAA/9Fqq62WP/3pT1l22WXz2Wef5bXXXsuIESO+8dyOHTtm3333zcEHH5yxY8fm6KOPzquvvjqTVwwAAAAzjx3vAAAAwLeqVCopl8upra3NrrvumnK5nOOPPz4vvPBCrrnmmiy11FJp3779167r2LFj9tprr3z++edZZpll0qVLlyZYPQAAAMwcpUqlUmnqRQAAAACzhunfw/5trrrqqvTt2zfjxo3LkUcemYMPPvgb43uSTJw4sTpi/rvcGwAAAGZHdrwDAAAASZLGxsbU1tYmSV566aWMGzcur776alZdddUstthiWWSRRZIku+yyS5Lk8MMPz8CBA5PkW+P79O91F90BAACYUwnvAAAAwAzR/fTTT8/FF1+cV155JUnSqlWrLLfccjnrrLOy4YYbJpka30ulUg477LBqfO/Tp0/atWvXNA8AAAAATcioeQAAAJjLVSqVlEqlJMkRRxyR0047LUsvvXR23333TJ48OS+//HJuuummJMk111yTHXfcsXrt1VdfncMOOyzvvvtuDj/88BxyyCFZaKGFmuQ5AAAAoKkI7wAAAECS5NJLL81ee+2Vn/70pxkwYEBWX3316rGf/OQnefjhh9O7d+9ceumladu2bXWH/DXXXJPf/e53+eijj/Lwww9nvfXWa6pHAAAAgCZh1DwAAACQSZMm5frrr0/btm3Tv3//GaL7ySefnIcffjjbbLNNDj/88K+Nk99pp50yefLklMtl0R0AAIC5kh3vAAAAQMaMGZMVVlghu+22Wy6//PLq5/3790+/fv3Sq1evDBgwIF27dk2SjBw5MgsssECWWWaZr92rXC6npqZmZi0dAAAAmpwd7wAAADAXaWhoSF3d1/85YMKECUmSiRMnVj/7tuieJBdccEEaGxtzwQUXpEWLFtV3xCcR3QEAAJjr+E0YAAAA5nDjx4/PY489lj322CMXXHBBPvjgg6+d0759+7Rp0ybjx49PkpxwwgnfGt2vv/76XHbZZVl++eXTsmXLGaI7AAAAzI3seAcAAIA52OjRo3PKKafkH//4Rz7//PM8++yz6d69e9q2bZtmzZpVz5t//vmzxhpr5P7778/GG2+coUOHZsstt0y/fv1miO6PPvpoBg4cmGWWWSabbrppUzwSAAAAzHK84x0AAADmUPfff3922WWXvP/++9l+++1z4IEHZokllsgiiyzyjeffeuut2XbbbZMknTt3zi233JJll122enzo0KHp379/HnnkkVxyySX51a9+NVOeAwAAAGZ1wjsAAADMgR544IFsvvnmWWyxxdK3b9/stdde1WONjY2pra1Nknz++eeZd955q8fOOeecHHTQQUmSww8/PD179kzLli0zcuTInH766fnggw8yaNCgHHzwwUmSSqVi1DwAAABzPeEdAAAA5jDPPvtsfvazn6VcLueMM87Idtttl2TG4J4kzzzzTP785z9n4403zhZbbFH9/PLLL8/ee++d+vr6Ge67wgor5Mgjj6zudC+Xy6mpqZkJTwQAAACzNuEdAAAA5hCVSiUTJ07M73//+1x22WU544wz0qdPnyRfj+TPP/98jj/++Nxzzz1ZaKGFcu655+anP/1p9fgTTzyRZ599NiNGjEhdXV022mijLL/88uncufM33g8AAADmZsI7AAAAzEE++OCDrLnmmll22WUzdOjQJF+P5C+88EKOPfbY/PWvf81SSy2V119/PSuuuGIGDx48w873b2O8PAAAAMzIV9MBAABgDnLrrbdm7NixWXXVVZNMHS8/fXR/5ZVXcthhh+Wvf/1rDj300AwZMiS//OUv89JLL6VPnz654447qud+23f1RXcAAACYkfAOAAAAc5CJEycmSZZccskkX4/n88wzT5566qkccMABOe2007LMMsukT58+1fh+4IEH5uGHH04isAMAAMB3VdfUCwAAAACKmzZO/tNPP02SPP7440mSurp//epfqVTSsWPHjB49Ou3atat+vs4666Rv37758MMPM3To0IwaNSrrr7++8A4AAADfkR3vAAAAMAeYNk6+W7duqaury/PPP59Ro0Yl+deu91KplEqlUo3u5XK5Oop+zTXXzLzzzpt55503W2yxhegOAAAA/wXhHQAAAOYgiy++eBZccME899xzue6665JMDe7lcrn652lKpVJqa2uTJH/7299y22235f/9v/+XJZZYono+AAAA8J8J7wAAADAHWWmllXLssccmSU4//fQMGjQoyb92xE9TLperEX7YsGEZOHBgFllkkfy///f/0rx586+dDwAAAHw7v0UDAADAHGLaSPldd901e++9d5LksMMOyymnnJL6+voZzp0W1h988MEcddRRefzxx3Pcccdlgw02mKlrBgAAgDlBqTLtt3IAAABgjvH000/nrLPOyuWXX54k2WOPPbLxxhtnq622Sm1tbSZMmJC//e1vGThwYN58882cccYZ6dOnT5KpAd873gEAAOC7E94BAABgDvXCCy/ksssuq46bL5VKWX755dO8efO8//77ef/999OpU6f069cve+yxR5KpI+iNmQcAAID/jvAOAAAAc7jrrrsu1157bZ588sl88MEHad26ddq1a5df//rX2WCDDdKtW7ckojsAAAD8r4R3AAAAmAtMnDgxEyZMyLhx49KmTZu0b98+bdu2rR43Xh4AAAD+d8I7AAAAzGb+m53p04L6N10jtgMAAMD3w/w4AAAAmMWVy+UZfv5qQP/q8SRpbGxMkmpY/6ZQL7oDAADA98OOdwAAAJiFNTY2pra2Nkny0EMP5aWXXspjjz2WNddcM8svv3w23XTTb72mUqnk4YcfzpprrpnWrVvP7KUDAADAXEN4BwAAgFnU9OPhTzzxxAwePDiffvrpDOccfvjh6dOnTxZeeOEZPq9UKllmmWXy9ttv5/bbb89mm232X42oBwAAAL47v20DAADALGpaJD/mmGNy/PHHZ+mll84111yTv/3tb7nwwguz0EIL5bTTTsuxxx6b999/f4Zr6+vr06xZszQ0NOT0009PQ0OD6A4AAAA/kLqmXgAAAADw7W644Yaceuqp2WCDDXLmmWema9eu1WMPP/xwrr322rz++uv54osvqp83NjamefPmGTFiRHr06JFnn302H374YTp06NAUjwAAAABzPF91BwAAgFnYPffck7q6upxwwgkzRPcTTjghV111VbbccsucdNJJWXrppavHamtrM2XKlMw333w55JBD8t577+Xmm29uiuUDAADAXEF4BwAAgFnUJ598kttuuy2dO3dOt27dqp/3798/J5xwQnr16pUTTjgha6+9dpJk+PDhuf3225MkzZs3T5Ksu+66WWuttfKjH/1o5j8AAAAAzCWMmgcAAIBZVKlUSpJMmDAhn3/+edq2bZv+/funX79+6dWrVwYMGDDDLvirr746d955Z9Zcc80sssgiSZIVVlghd955ZxZccMFUKpXqPQEAAIDvjx3vAAAA0MQaGxu/8ef5558/P/rRj/LRRx9l7Nix6dev37dG91tvvTXnn39+Ntpooyy44IIz3G+BBRZIEtEdAAAAfiDCOwAAADSx2traJMkjjzxS/bm+vj5JsuGGG+ajjz5K7969079//2y11VY58cQTZ4juw4YNy8CBA7PQQgtlu+22S4sWLWa4v+AOAAAAPyzhHQAAAGYBRx99dHr06JHBgwcnSZo1a5Yk+fWvf50f/ehHee2119KxY8fsvffeWX311avX3X333TnssMPyxBNP5IQTTsiGG27YJOsHAACAuZl3vAMAAEATKJfLqan51/fh55lnntTU1GTw4MEpl8s59NBDkySLL754brrppmy88cYZN25c+vfvn0cffTQLL7xwXnvttVxyySWZNGlSBg0alN/+9rdJ4l3uAAAAMJOVKpVKpakXAQAAAHOTxsbG6nj5W2+9NU8//XSefvrpPPjgg/nggw/SoUOHHH744Tn44IOr17zyyis54IADMnLkyIwfPz5JUldXl3XWWScHHnhgdthhhyRfD/oAAADAD094BwAAgJlo+t3oRx11VM4555wssMAC6dGjR+rr6zNs2LCMGzcu8847b/r165eDDjqoeu3HH3+c9957L8OGDUttbW06d+6cjh07ZtFFF00iugMAAEBTEd4BAACgCZx55pk55JBD0rt375x44onp0qVLkmT48OG5+eabc8YZZ6RVq1Y54YQTqvH9342QN14eAAAAmo7wDgAAADPZ22+/na222ipjxozJ0KFDs9Zaa6WhoSF1dXVJkvfffz8XX3xx+vfvn/nmmy9HHnlkDjnkkCQzjqkHAAAAZg3mzwEAAMBM9tlnn+XVV1/Nuuuum7XWWitJZojpCy+8cHbZZZdstdVW+eijj3LWWWdl8ODB1fN8hx4AAABmLcI7AAAAzGQTJkzIZ599ln/+85955ZVXkuRrY+KXWmqpbLbZZkmSd955J6ecckouv/zybzwXAAAAaFrCOwAAAMxkK6ywQn784x/nk08+yYsvvphk6gj5aRoaGpIkG264YTp37pwDDzwwn3zySS666KK8/PLLTbJmAAAA4NsJ7wAAAPA9+eCDD/Lhhx/O8Nk3jYWfb775suaaa2bChAk55JBDMnbs2NTW1qZcLqdSqVTf9f7II4/kpZdeyrbbbpsdd9wxjz/+eIYNGzZTngUAAAD47oR3AAAA+B7cdddd6datW3bZZZfcddddmTBhQpKpY+Gnj++VSiU1NTU57bTTstZaa+Xll1/OZpttlhdeeCGNjY3VMfLDhg3LxRdfnG7duqVnz57ZYIMNkiQPPPDADLvjAQAAgKZX19QLAAAAgNndW2+9lR122CETJkzIq6++mrvuuiu9evXKxhtvnAMOOCClUil1dXUpl8upqalJfX19WrdunWuvvTbbb799Ro0alS222CK9evVKt27d8vHHH+fCCy/Miy++mD/84Q9Jkk6dOiVJWrZsmdra2qZ8XAAAAOArSpVvmnkHAAAAfGdjxoxJ796989JLL6VTp05p165dnnzyySRJjx49st5662XvvffOUkstVb2msbExtbW1+eCDD7LLLrvkwQcfzJdfflk93rx585xyyik56KCDkiS77757rrjiilx11VXZaaedZubjAQAAAP+B8A4AAADfg8GDB+fQQw/NlltumYMPPjhvvfVWBgwYkHHjxuWLL75I+/bt85vf/CY9e/bMT3/60xmunTJlSu6555489dRTee2119KlS5esssoq2WijjZIkZ599dvr06ZPVVlstt99+exZZZJGmeEQAAADgWwjvAAAAUMC08fGvv/56tt5664wbNy5///vfs8466+T111/P008/nQsuuCB33XVX9ZppAX677bZLixYt/u39Tz311AwePDiVSiUPPPBAfvSjH/3QjwQAAAD8l4R3AAAA+B6Uy+Xss88+ufTSS9OrV6/ccMMNad26dfXYI488kiuuuCJ//OMfkyS1tbVZa621cuCBB2bttdfO8ssvnySpVCopl8t57bXX8vvf/z533HFHlltuudxyyy1ZeeWVm+z5AAAAgG9X09QLAAAAgNldpVJJTU1Njj766Cy55JJ55pln8vLLLydJJk2alJqamiy//PL5+OOPkyRrrbVWllxyyTz++OPZZ5990q1btwwYMCCTJ09OqVSqvvu9RYsW2X///XP33XeL7gAAADALE94BAACgoFKplEqlkrZt22attdbKW2+9lWuuuSZJ0qpVq7zzzjvZb7/98te//jWbbrppnnjiiTz55JM56qijstZaa+Wjjz5K8+bN07Jly+o9u3XrlosvvjinnXZallpqqSZ6MgAAAOC7MGoeAAAAvkf33HNPNt988yy88MJ5/PHH07Jly+y33365+eabs9lmm+XOO++sntvY2JhyuZyRI0dm3XXXrX5eqVRSKpWaYvkAAADA/0B4BwAAgO9RfX19dtppp9x6663p379/Ro0alb/85S8zRPeGhobU1dV97dpyuZyaGsPpAAAAYHYjvAMAAMD37KyzzkqfPn3SvHnzTJkyJZtuumnuuuuuJN8e3QEAAIDZl/AOAAAA35NpI+LL5XI23HDDPPTQQ+nevXsefPDBJKI7AAAAzKnMrwMAAIDvybToXqlUsuGGGyZJWrduXT0uugMAAMCcSXgHAACA71FNTU1qa2uzyy67ZIEFFsjdd9+dSy+9tKmXBQAAAPyAhHcAAAD4npXL5Sy33HI54IAD0qxZszz22GNNvSQAAADgByS8AwAAwDeoVCoz/H965XL5315TUzP11+311lsv9fX1+dOf/pQxY8Z8470AAACA2Z+XywEAAMBXNDY2pra2Nkkybty4fPjhh/n000/TsWPHLLfcctWwPr36+vo0a9YsSfLpp59m/vnnz+abb57tttsuXbt2zXLLLTdTnwEAAACYeUoVX7cHAACAqumj+7nnnpsrrrgizz//fCZNmpSFF144m2yySc4444x07Njxa9dWKpX07Nkz6667bo455pi0adMmH3zwQRZeeOEkU3fKf1O0BwAAAGZvwjsAAAD8n0qlklKplCQ54ogjctppp2WhhRZKr1690tDQkAceeCBjx47NGmuskfPPPz9rr7129fwkueCCC7L//vsnSe66665suumm33hvAAAAYM7ia/YAAADwf6aF8fPOOy+nnXZaevXqlTvuuCN/+tOfcuWVV2bMmDFZaqml8uSTT+aGG27IxIkTZ7h+3333TZ8+fZIkt912W5KpO+invzcAAAAw5xHeAQAAYDrvvvtuLrvssiy88MI58cQTs8Yaa1SPnX322Xn99dfTu3fv/OIXv8g888xTPfbll18mSfr27Zt111039957bxoaGqpj6wEAAIA5l/AOAAAA03n77bczatSo7Lbbbll99dWrn/fv3z99+/ZNr1690q9fv3Tr1i1J8swzzyRJWrRokSRp165dtthii7z33nt59dVXZ/4DAAAAADOd8A4AAADTGT9+fJKkefPm1c/69++ffv36pVevXhkwYEC6du1aPXbiiSemX79+1Z9ramqy33775Y477sgKK6ww09YNAAAANB3hHQAAAKbTrFmzJMlrr72WJOnXr9+3RvfLL788N954Yzp06FD9rFwup127dll77bVn7sIBAACAJlOqVCqVpl4EAAAAzCo++OCDbLLJJhk7dmw233zzXHfddd8Y3R966KHsueeeadasWa699tp06dKlCVcNAAAANCU73gEAAJirlMvlf3t8oYUWSq9evfLxxx/nhhtuyHrrrZeTTz55huj+4IMPpl+/fnnzzTdzxBFHiO4AAAAwl6tr6gUAAADAzNLY2Jja2tokyd/+9reMHTs2n3zySTbaaKOsuuqqad26dZJk4MCBefrpp3PHHXfkxRdfzLPPPpuGhobMO++8uf/++3PSSSdl7NixGTx4cHbeeeckSaVSSalUarJnAwAAAJqOUfMAAADMFaYP48cee2wGDBhQPbboootm8803z6BBg9K2bdvq5zvttFOuu+661NTUpK6uLrW1tZk0aVIWW2yxHH/88fntb3+bZOou+poaQ+UAAABgbiW8AwAAMFcZPHhwDj300PzoRz/KzjvvnJdeeikPPfRQXn/99Wy++ea55pprssACC1TPv/rqq/Pkk0/mqaeeSl1dXbbZZpusscYaWWeddZKI7gAAAIDwDgAAwFxkwoQJ6d27d1q2bJnTTjstq6yySiZOnJhnnnkme+21V5555plssskmuf7662eI78nUwF6pVKqj6hPj5QEAAICpfCUfAACAOdZXv2v+ySef5Mknn8xee+2VVVZZJZVKJa1bt86Pf/zj3HDDDenatWuGDBmSHXbYIR9//HGSpL6+PklSU1MzQ3RPIroDAAAASYR3AAAA5lCNjY3VMN7Q0JBPP/00jY2NWWCBBdKlS5ckM4b5FVdcMdddd11WXXXVGeJ7s2bN0tjY2CTPAAAAAMwehHcAAADmOOVyubo7/dxzz83PfvazrLDCCjnkkEPyySef5LnnnvvG61ZcccVcf/311Z3vP//5z/Phhx9+bac7AAAAwPS84x0AAIA51tFHH52BAwemVatWKZVKmTJlShoaGvLzn/88N954Y5KpO+O/GtZffvnlbLvttnnhhRdy0003Zdttt22K5QMAAACzCeEdAACAOdJtt92WXXbZJd27d8/xxx+fli1bZtSoUdlzzz3T0NCQvfbaKxdeeGGSb47vzz//fEaPHp2ddtqpKZYPAAAAzEbqmnoBAAAA8H34ajwfOXJk2rZtm4EDB2bVVVdNkqy66qpZZpllsvHGG+fiiy9Oklx44YWpra392vUrr7xyVl555SRTR9fX1HhbGwAAAPDN7HgHAABgjnLwwQenXbt2GTt2bFq3bp3BgwenoaEhtbW1qVQqqampyWOPPZaePXt+bed7Q0ND6up8Rx0AAAD47wjvAAAAzDGeeOKJrLvuukmSNm3aZOutt86VV145wznTdq9PH9/33XffnHfeeUmSSqWSUqk009cOAAAAzL7MyQMAAGCOsc466+S8885L69at89lnn+Xdd9/NG2+8McM5NTU1KZfL6datWx544IG0atUqF1xwQXbdddckEd0BAACA/5rwDgAAwByhXC4nSfbdd9+cdtppqa2tzb333purrrrqa+dOH9/vueeeJMnSSy89U9cLAAAAzDmMmgcAAGC2M/04+Gmj45MZ39F+0UUXZd99902SnHHGGenTp8/X7jPt2nfffTcdO3b82r0BAAAAvgvhHQAAgNnK9KE9ST777LO0adOm+vOXX36ZFi1aJEkuvvji7LPPPkm+Pb4n/4rtX703AAAAwHfhXxMAAACYbTQ2NlbD+HXXXZdf//rXWWmllbLlllumb9++mTJlSlq0aJGGhoYkyV577ZWLLrooSXLooYdm0KBB33jfaTvcRXcAAADgf2HHOwAAALOF6XejH3PMMTn55JNTU1OThRZaKPX19fnoo4/y4x//ONddd12WXHLJNDY2pra2NklyySWXZO+9906SnHLKKTn88MOb7DkAAACAOY+v8gMAADDLq1Qq1ejer1+/nHzyyenevXvuueeevP322xkxYkSWXnrpPP7449lmm23y8ssvp7a2No2NjUmSPffcM5dcckmS5IgjjsiTTz7ZZM8CAAAAzHnqmnoBAAAA8G2mvXt92ij46667LmeddVY233zznHLKKenatWsmTpyYu+++O+PGjcu8886bp556KjvvvHOuueaaLL/88tWd77/5zW8yadKkNDQ0ZI011mjiJwMAAADmJEbNAwAAMEt5+umnM2HChKy//voplUrV+P7ee+9l5513znPPPZe//OUv6d69e+rr63P22WenX79+WWyxxfK3v/0tu+66a0aMGJE11lgj11xzTVZYYYUZxs5PM/3oegAAAIAi/AsDAAAAs4wRI0ZktdVWy1FHHZVHH320Gt2TZMqUKXnzzTez//77p3v37mlsbMwVV1yRAQMGpEOHDrn//vuz4oor5txzz0379u3z5JNPZqeddspLL72U2trafPV756I7AAAA8H3xrwwAAADMMiZOnJjlllsuDz/8cAYMGJBHHnmkGsw7duyY66+/Pr/+9a+TJGPGjMl5552XeeedN3fffXcWWWSR1NfXZ7HFFkvz5s2r8b1Xr1755JNPqgEfAAAA4PvmHe8AAADMMn7yk5/kj3/8Yw466KDceeedSZKjjjoq66+/fpo1a5ZVVlkldXVTf5W94YYbMnr06Fx88cVZdtllU19fn2bNmmXxxRfPsssum27duuWBBx7IFltskbZt2zbhUwEAAABzOjveAQAAmCVM29neo0ePDB48OKuvvnruvPPOnHzyydWd73V1dSmXy0mSYcOGpaamJqusskqSVN/hfvvtt+ehhx7KVlttlcceeyzHHXfcDPcHAAAA+L4J7wAAAMwSSqVSNY737NnzW+N7TU1NGhsbM88886RcLueBBx5IMvWd7Y899lgGDx6cpZdeOm3atKnee/p3xQMAAAB830oVX/kHAACgCXzxxRepra1Ny5Ytq59N281eUzP1e+IPPPBA+vTpk1GjRuWnP/1pdex8qVTKbbfdlt69eydJ9thjj7Rq1Sq33HJL3nnnnfzhD3/IfvvtN/MfCgAAAJgrCe8AAADMdPfcc0/69u2bJZdcMrvttluWXHLJrLHGGtXjDQ0N1Xe5fzW+H3HEEenevXtqampy8cUXZ5999qle1759+5x00knZa6+9ktjpDgAAAMwcwjsAAAAz1YMPPpgNN9ywOla+VCqlrq4u22yzTTp37pyddtop888/fxZaaKHqNffee28OO+ywjB49OptvvnmOOuqodO/ePaVSKcOGDctzzz2XDh06ZMkll6y+871cLld3zgMAAAD8kIR3AAAAZqonnngi6667bpo1a5b55psvPXr0yP33358vvvgi9fX1WWCBBbLYYotl++23z0orrZQtttgi88wzT5555pnsuuuuefrpp7PJJpvk6KOPTo8ePb4xrtvpDgAAAMxMdU29AAAAAOYu66yzTh5//PF07949H374YVZbbbUcfvjhmThxYq666qq8+OKLGTZsWJ599tkkyUorrZRVV101++67b/bcc89cd911GTJkSFq3bp1KpZKePXt+LbKL7gAAAMDMZMc7AAAATWL48OH58Y9/nCQ55phjcuSRR6ZVq1Ypl8u566678vLLL+eqq67KO++8k3HjxiVJFl988dTX12f8+PFpbGxMz549c/XVV2fRRRdtykcBAAAA5nLCOwAAAE1mxIgRWWeddZIkhx9+eA499NC0b9++evyzzz7Lhx9+mFtvvTWjRo3Krbfemi+//DKTJ09Okpx++uk55JBDmmTtAAAAANMI7wAAADSp6Xe+H3nkkTn44INniO/Te+211/Liiy/m6quvTvfu3bPPPvsk8U53AAAAoGkJ7wAAADS5r8b3Pn36pF27dkmScrmcmpqab43r044DAAAANBXhHQAAgFnCv4vv05s+wNvpDgAAAMwKhHcAAABmGd81vgMAAADMSsziAwAAYJax9tpr5/HHH0+SDBw4MGeffXbGjx/fxKsCAAAA+PfseAcAAGCWM3z48Ky33nppbGzMQQcdlJNPPjktW7Zs6mUBAAAAfCM73gEAAJjlrL322nnkkUeSJIsvvrjoDgAAAMzS7HgHAABglvXee++lQ4cOTb0MAAAAgH9LeAcAAGCWVy6XU1NjaBsAAAAwaxLeAQAAAAAAAKAA2wUAAAAAAAAAoADhHQAAAAAAAAAKEN4BAAAAAAAAoADhHQAAAAAAAAAKEN4BAAAAAAAAoADhHQAAAAAAAAAKEN4BAAAAAAAAoADhHQAAAAAAAAAKEN4BAAAAAAAAoADhHQAAAAAAAAAKqGvqBfyQNthgg6ZeAgAAAAAAAMyS7r///qZeArOASZMmpVevXkmSf/zjH2nVqlUTr2j2ZMc7AAAAAAAAABQgvAMAAAAAAABAAcI7AAAAAAAAABQgvAMAAAAAAABAAcI7AAAAAAAAABQgvAMAAAAAAABAAcI7AAAAAAAAABQgvAMAAAAAAABAAcI7AAAAAAAAABQgvAMAAAAAAABAAcI7AAAAAAAAABQgvAMAAAAAAABAAcI7AAAAAAAAABQgvAMAAAAAAABAAcI7AAAAAAAAABQgvAMAAAAAAABAAcI7AAAAAAAAABQgvAMAAAAAAABAAcI7AAAAAAAAABQgvAMAAAAAAABAAcI7AAAAAAAAABQgvAMAAAAAAABAAcI7AAAAAAAAABQgvAMAAAAAAABAAcI7AAAAAAAAABQgvAMAAAAAAABAAcI7AAAAAAAAABTQpOH9/fffz+23357jjjsuW2yxRdq3b59SqZRSqZTdd9+9KZcGAAAAAAAAAN9JXVP+5R06dGjKvx4AAAAAAAAACptlRs0vscQS2WyzzZp6GQAAAAAAAADwX2nSHe/HHXdc1l577ay99trp0KFDXn/99Sy99NJNuSQAAAAAAAAA+K80aXg/4YQTmvKvBwAAAAAAAIDCZplR8wAAAAAAAAAwOxLeAQAAAAAAAKAA4R0AAAAAAAAAChDeAQAAAAAAAKAA4R0AAAAAAAAAChDeAQAAAAAAAKAA4R0AAAAAAAAAChDeAQAAAAAAAKAA4R0AAAAAAAAAChDeAQAAAAAAAKAA4R0AAAAAAAAAChDeAQAAAAAAAKAA4R0AAAAAAAAACqhryr/84YcfzpgxY6o/jx8/vvrnMWPG5PLLL5/h/N13330mrQwAAAAAAAAAvpsmDe+XXnpp/vznP3/jsUceeSSPPPLIDJ8J7wAAAAAAAADMaoyaBwAAAAAAAIACmjS8X3755alUKt/5PwAAAAAAAACY1djxDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgAAAAAAAAAFCO8AAAAAAAAAUIDwDgD8//bu58Wq+o/j+PtOg9Nk7QRpHCPRytpJDggGuoigiAb/g6Hsx0aQYGjRILSrDApcJaMpCNIuoWa2JiOIjLYISsJoRKdFuauYCvF+F1+6JNnU3NfcOdo8HqvPnfM5974XZ/fkcwYAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAINBVeP/hhx/q008/rQMHDtSzzz5b69atq1arVa1Wq8bGxpb8fdPT07Vnz54aHh6ugYGBGh4erj179tT09HQ34wEAAAAAAADAiunv5qb169cvy4/fvHmzXnnllTpy5Mgtf5+fn6/5+fn65JNPau/evfXhhx9WX5/D+QAAAAAAAADceeKa/dBDD9UzzzzT1b1vvvlmJ7pv27atTp48WefPn6+TJ0/Wtm3bqqpqcnKyJiYm0jEBAAAAAAAAoCe6OvF+4MCBGhkZqZGRkVq/fn3Nzc3Vpk2blvQd33zzTb333ntVVbV9+/Y6c+ZMDQ4OVlXVyMhIvfDCC7Vr166anZ2tgwcP1osvvlhbtmzpZlwAAAAAAAAA6JmuTry/9dZb9fzzz0evnP/ggw/qxo0bVVV16NChTnT/w3333VeHDh2qqqobN27U+++/3/VvAQAAAAAAAECvNPKP09vtdp06daqqqrZu3Vo7duy47b4dO3bUY489VlVVp06dqna7vWIzAgAAAAAAAMC/0Uh4/+677+r777+vqqpdu3YtuveP6/Pz8zU3N9fr0QAAAAAAAABgSRoJ71999VVnvXXr1kX3/vn6119/3bOZAAAAAAAAAKAbjYT3a9euddbDw8OL7t24cWNnffXq1Z7NBAAAAAAAAADdaCS8//TTT531/fffv+jetWvXdtY///xzz2YCAAAAAAAAgG40Et5//fXXznrNmjWL7h0YGOisFxYWejYTAAAAAAAAAHSjkfB+7733dta///77ont/++23znpwcLBnMwEAAAAAAABANxoJ7w888EBn/U+vj//ll1866396LT0AAAAAAAAArLRGwvvw8HBnfe3atUX3Xr16tbPeuHFjz2YCAAAAAAAAgG40Et6feOKJzvrSpUuL7v3z9ccff7xnMwEAAAAAAABANxoJ75s2baqhoaGqqvr8888X3XvmzJmqqtqwYUM9/PDDvR4NAAAAAAAAAJakkfDearVqdHS0qv5/ov3cuXO33Xfu3LnOiffR0dFqtVorNiMAAAAAAAAA/BuNhPeqqv3799c999xTVVX79u2rhYWFW64vLCzUvn37qqqqv7+/9u/fv9IjAgAAAAAAAMA/6u/mppmZmbp8+XLn8/Xr1zvry5cv17Fjx27ZPzY29pfvePTRR2t8fLzefvvtmp2drZ07d9Ybb7xRmzdvrm+//bbeeeed+uKLL6qqanx8vB555JFuRgUAAAAAAACAnmq12+32Um8aGxur48eP/+v9f/cTN2/erJdffrmOHj36t/e+9NJLdfjw4errW/rh/N27dy/5HgAAAAAAAFgNTp8+3fQI3AEWFhbqueeeq6qqqampGhwcbHiiu1Njr5qvqurr66sjR47UZ599VqOjozU0NFRr1qypoaGhGh0drampqZqcnOwqugMAAAAAAADASujqxPvdwol3AAAAAAAAuD0n3qly4n25OEoOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAACw6pw4caJeffXV2r59ew0MDFSr1apjx441PRYraDmfgf7lHQ0AAAAAAADgzjcxMVFXrlypdevW1YMPPlhXrlxpeiRW2HI+A068AwAAAAAAAKvO5ORkzc3N1Y8//livvfZa0+PQgOV8Bpx4BwAAAAAAAFadp59+uukRaNhyPgNOvAMAAAAAAABAQHgHAAAAAAAAWKUuXrzYWb/++us1Ozvb4DR3L+EdAAAAAAAAYBV69913a2JiovP50qVLNT4+XgcPHmxwqruT8A4AAAAAAACwyszOztb09PRtr01NTdWFCxdWeKK7W3/TA/TS6dOnmx4BAAAAAAAA4I7z0UcfLXr96NGj9eSTT67QNHc/J94BAAAAAAAAVpnr169H17nVf/rEOwAAAAAAAAB/9fHHHzc9wn+KE+8AAAAAAAAAEGi12+1200MAAAAAAAAArKTJycmamZmpqqovv/yyLl68WDt37qwtW7ZUVdVTTz1Ve/fubXJEemw5nwGvmgcAAAAAAABWnZmZmTp+/Pgtfzt79mydPXu281l4/29bzmfAiXcAAAAAAAAACPgf7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAAHhHQAAAAAAAAACwjsAAAAAAAAABIR3AAAAAAAAAAgI7wAAAAAAAAAQEN4BAAAAAAAAICC8AwAAAAAAAEBAeAcAAAAAAACAgPAOAAAAAAAAAIH/AZIlt1EA0i3IAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Exploratory Data Analysis (EDA)\n",
        "\n",
        "EDA helps you understand the characteristics of your dataset."
      ],
      "metadata": {
        "id": "4t30CM34Zn8a"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Dropping rows with any missing values\n",
        "df.dropna(inplace=True)\n",
        "\n",
        "# Alternatively, filling missing values with the mean or median for numerical columns\n",
        "# df.fillna(df.mean(), inplace=True)\n"
      ],
      "metadata": {
        "id": "8JoIe7PwRW1y"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Data Cleaning\n",
        "\n",
        "Handling Missing Values: You can either remove rows with missing values or fill them with appropriate values."
      ],
      "metadata": {
        "id": "TGXfmuHcZuPz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Remove duplicate rows\n",
        "df.drop_duplicates(inplace=True)\n"
      ],
      "metadata": {
        "id": "RWWeKpRKRaz5"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Removing Duplicates"
      ],
      "metadata": {
        "id": "fb16TgUFZyQY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Using boxplot to visualize outliers\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.figure(figsize=(10, 5))\n",
        "sns.boxplot(data=df)\n",
        "plt.show()\n",
        "\n",
        "# Alternatively, using Z-score\n",
        "from scipy import stats\n",
        "import numpy as np\n",
        "\n",
        "z_scores = np.abs(stats.zscore(df.select_dtypes(include=[np.number])))\n",
        "df = df[(z_scores < 3).all(axis=1)]  # Keeping rows with Z-scores less than 3\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 451
        },
        "id": "Ag8Lfg_-Re1p",
        "outputId": "6493f102-6b0b-4075-e069-18dfefce79b1"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Outlier Detection\n",
        "\n",
        "You can use statistical methods (like Z-score or IQR) or visualizations (like box plots) to detect outliers."
      ],
      "metadata": {
        "id": "ganGfZZQZ2N_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "\n",
        "# Convert all numeric columns to a common numeric type (e.g., float64)\n",
        "numeric_cols = df.select_dtypes(include=np.number).columns # Changed to np.number\n",
        "\n",
        "# Check if there are any numeric columns\n",
        "if len(numeric_cols) > 0:  # Added this condition\n",
        "    df[numeric_cols] = df[numeric_cols].astype(np.float64)\n",
        "\n",
        "    # Apply MinMaxScaler\n",
        "    scaler = MinMaxScaler()\n",
        "    df[numeric_cols] = scaler.fit_transform(df[numeric_cols])\n",
        "else:\n",
        "    print(\"No numeric columns found in the DataFrame. Skipping MinMaxScaler.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m__NqV61RjMO",
        "outputId": "764c0f11-0c05-4027-9ead-e335b2e58bfa"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "No numeric columns found in the DataFrame. Skipping MinMaxScaler.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "You might want to apply normalization or standardization.\n",
        "\n",
        "Normalization (scaling the data between 0 and 1)"
      ],
      "metadata": {
        "id": "wGwCUUKuZ8IJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "# Convert numeric columns back to numeric type if necessary\n",
        "for col in df.select_dtypes(include=[np.number]).columns:\n",
        "    df[col] = pd.to_numeric(df[col], errors='coerce')\n",
        "\n",
        "#Select numeric features for scaling, ensure they have numeric dtypes\n",
        "numeric_features = df.select_dtypes(include=['number']).columns\n",
        "\n",
        "# Proceed with scaling only if there are numeric features\n",
        "if len(numeric_features) > 0:\n",
        "    scaler = StandardScaler()\n",
        "    df[numeric_features] = scaler.fit_transform(df[numeric_features])\n",
        "else:\n",
        "    print(\"No numeric columns to scale.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zZoYWGogUbr7",
        "outputId": "309fec8c-80bf-46c0-b3f3-e28c3d5aaee6"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "No numeric columns to scale.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Data transformation\n",
        "Standardization (scaling the data to have a mean of 0 and a standard deviation of 1):"
      ],
      "metadata": {
        "id": "BO2KUgVjZ9Zy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Using One-Hot Encoding\n",
        "df = pd.get_dummies(df, drop_first=True)\n"
      ],
      "metadata": {
        "id": "JF5cKY4rUn5n"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Encoding Categorical Variables\n",
        "\n",
        "You need to convert categorical variables into numerical formats for most machine learning algorithms."
      ],
      "metadata": {
        "id": "ah3zQu_LaHYW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Display the columns in the DataFrame\n",
        "print(\"Available columns in the DataFrame:\")\n",
        "print(df.columns.tolist())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LGLqoYZ6Uo20",
        "outputId": "8feda2d4-e148-444e-fb5c-148c7468d2f2"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Available columns in the DataFrame:\n",
            "['Name,Age,Gender,Salary,City_Bob,34,Male,48000,Los Angeles', 'Name,Age,Gender,Salary,City_Charlie,22,Male,54000,Chicago', 'Name,Age,Gender,Salary,City_Diana,45,Female,90000,New York', 'Name,Age,Gender,Salary,City_Eve,29,Female,61000,Los Angeles', 'Name,Age,Gender,Salary,City_Frank,31,Male,59000,San Francisco', 'Name,Age,Gender,Salary,City_Grace,27,Female,68000,Chicago', 'Name,Age,Gender,Salary,City_Henry,38,Male,83000,New York', 'Name,Age,Gender,Salary,City_Ivy,41,Female,91000,Los Angeles', 'Name,Age,Gender,Salary,City_Jack,36,Male,65000,Chicago']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "f1rP5kb2aT26"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Load your dataset with the correct delimiter\n",
        "df = pd.read_csv(\"Sample_dataset - Sheet1-2.csv\", delimiter=',', header=0)\n",
        "\n",
        "# Check the columns again to see if they are read correctly\n",
        "print(\"Available columns in the DataFrame:\")\n",
        "print(df.columns.tolist())\n",
        "\n",
        "# Display the first few rows of the DataFrame\n",
        "print(df.head())\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cXv9x6W1VM_S",
        "outputId": "09a93a5a-bf5c-4afc-ad8a-c836f1d97edf"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Available columns in the DataFrame:\n",
            "['Name,Age,Gender,Salary,City']\n",
            "       Name,Age,Gender,Salary,City\n",
            "0   Alice,28,Female,72000,New York\n",
            "1    Bob,34,Male,48000,Los Angeles\n",
            "2    Charlie,22,Male,54000,Chicago\n",
            "3   Diana,45,Female,90000,New York\n",
            "4  Eve,29,Female,61000,Los Angeles\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Load your dataset with explicit separator\n",
        "df = pd.read_csv(\"Sample_dataset - Sheet1-2.csv\", sep=',', header=0)\n",
        "\n",
        "# Check the columns again to see if they are read correctly\n",
        "print(\"Available columns in the DataFrame:\")\n",
        "print(df.columns.tolist())\n",
        "\n",
        "# Display the first few rows of the DataFrame\n",
        "print(df.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1aNNEqQ2WLCQ",
        "outputId": "339fca4a-04a1-4b87-b4fb-53d70b59f29a"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Available columns in the DataFrame:\n",
            "['Name,Age,Gender,Salary,City']\n",
            "       Name,Age,Gender,Salary,City\n",
            "0   Alice,28,Female,72000,New York\n",
            "1    Bob,34,Male,48000,Los Angeles\n",
            "2    Charlie,22,Male,54000,Chicago\n",
            "3   Diana,45,Female,90000,New York\n",
            "4  Eve,29,Female,61000,Los Angeles\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Manually creating the DataFrame\n",
        "data = {\n",
        "    'Name': ['Alice', 'Bob', 'Charlie', 'Diana', 'Eve', 'Frank', 'Grace', 'Henry', 'Ivy', 'Jack'],\n",
        "    'Age': [28, 34, 22, 45, 29, 31, 27, 38, 41, 36],\n",
        "    'Gender': ['Female', 'Male', 'Male', 'Female', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male'],\n",
        "    'Salary': [72000, 48000, 54000, 90000, 61000, 59000, 68000, 83000, 91000, 65000],\n",
        "    'City': ['New York', 'Los Angeles', 'Chicago', 'New York', 'Los Angeles', 'San Francisco', 'Chicago', 'New York', 'Los Angeles', 'Chicago']\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# Display the DataFrame\n",
        "print(\"DataFrame created manually:\")\n",
        "print(df)\n",
        "\n",
        "# Now proceed to create the new feature\n",
        "df['Salary_per_Age'] = df['Salary'] / df['Age']\n",
        "print(\"New feature 'Salary_per_Age' created:\")\n",
        "print(df.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CpUL-OzrXYNM",
        "outputId": "11b090bd-d1f7-48b4-d60d-93f34dc94a48"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "DataFrame created manually:\n",
            "      Name  Age  Gender  Salary           City\n",
            "0    Alice   28  Female   72000       New York\n",
            "1      Bob   34    Male   48000    Los Angeles\n",
            "2  Charlie   22    Male   54000        Chicago\n",
            "3    Diana   45  Female   90000       New York\n",
            "4      Eve   29  Female   61000    Los Angeles\n",
            "5    Frank   31    Male   59000  San Francisco\n",
            "6    Grace   27  Female   68000        Chicago\n",
            "7    Henry   38    Male   83000       New York\n",
            "8      Ivy   41  Female   91000    Los Angeles\n",
            "9     Jack   36    Male   65000        Chicago\n",
            "New feature 'Salary_per_Age' created:\n",
            "      Name  Age  Gender  Salary         City  Salary_per_Age\n",
            "0    Alice   28  Female   72000     New York     2571.428571\n",
            "1      Bob   34    Male   48000  Los Angeles     1411.764706\n",
            "2  Charlie   22    Male   54000      Chicago     2454.545455\n",
            "3    Diana   45  Female   90000     New York     2000.000000\n",
            "4      Eve   29  Female   61000  Los Angeles     2103.448276\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Creating new features can improve your model's performance.reate a Pandas DataFrame with sample data and compute a new feature based on existing columns. It includes the steps for displaying the DataFrame and showcasing the newly created feature.This section computes a new feature called Salary_per_Age, which is calculated by dividing the Salary by Age for each individual in the DataFrame.\n",
        "Result: The new feature is added as a new column in the DataFrame.\n",
        "Display: The print(df.head()) function shows the first five rows of the updated DataFrame, allowing the user to see the new feature alongside the original data."
      ],
      "metadata": {
        "id": "U_LhSB5iaW_1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Display available columns in the DataFrame\n",
        "print(\"Available columns in the DataFrame:\")\n",
        "print(df.columns.tolist())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tWQeUVH4XmFX",
        "outputId": "ea1f1d05-2d81-47ab-a8c3-f0e4064ad51b"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Available columns in the DataFrame:\n",
            "['Name', 'Age', 'Gender', 'Salary', 'City', 'Salary_per_Age']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Replace 'Salary' with your actual target variable name\n",
        "X = df.drop('Salary', axis=1)  # Features\n",
        "y = df['Salary']  # Target variable\n"
      ],
      "metadata": {
        "id": "kEdiZ0M7YAKN"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Manually creating the DataFrame (or load your CSV)\n",
        "data = {\n",
        "    'Name': ['Alice', 'Bob', 'Charlie', 'Diana', 'Eve', 'Frank', 'Grace', 'Henry', 'Ivy', 'Jack'],\n",
        "    'Age': [28, 34, 22, 45, 29, 31, 27, 38, 41, 36],\n",
        "    'Gender': ['Female', 'Male', 'Male', 'Female', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male'],\n",
        "    'Salary': [72000, 48000, 54000, 90000, 61000, 59000, 68000, 83000, 91000, 65000],\n",
        "    'City': ['New York', 'Los Angeles', 'Chicago', 'New York', 'Los Angeles', 'San Francisco', 'Chicago', 'New York', 'Los Angeles', 'Chicago']\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# Display available columns\n",
        "print(\"Available columns in the DataFrame:\")\n",
        "print(df.columns.tolist())\n",
        "\n",
        "# Assuming 'Salary' is the target variable\n",
        "X = df.drop('Salary', axis=1)  # Features\n",
        "y = df['Salary']  # Target variable\n",
        "\n",
        "# Display the features and target variable\n",
        "print(\"Features (X):\")\n",
        "print(X.head())\n",
        "print(\"Target variable (y):\")\n",
        "print(y.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sBpaOXWEYCLw",
        "outputId": "bf97b1cc-31ee-4ba2-f0fb-9f228b8f41c3"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Available columns in the DataFrame:\n",
            "['Name', 'Age', 'Gender', 'Salary', 'City']\n",
            "Features (X):\n",
            "      Name  Age  Gender         City\n",
            "0    Alice   28  Female     New York\n",
            "1      Bob   34    Male  Los Angeles\n",
            "2  Charlie   22    Male      Chicago\n",
            "3    Diana   45  Female     New York\n",
            "4      Eve   29  Female  Los Angeles\n",
            "Target variable (y):\n",
            "0    72000\n",
            "1    48000\n",
            "2    54000\n",
            "3    90000\n",
            "4    61000\n",
            "Name: Salary, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "reate a Pandas DataFrame with sample data and separate features from the target variable for further analysis or modeling. It provides a clear structure for handling data in machine learning tasks.X: A new DataFrame that contains all columns except the Salary column, representing the features.\n",
        "y: A Series that contains only the Salary column, representing the target variable.\n",
        "Method Used:\n",
        "df.drop('Salary', axis=1): Drops the Salary column from the DataFrame, where axis=1 specifies that a column is to be dropped.Features (X): Displays the first few rows of the feature DataFrame X using print(X.head()).\n",
        "Target variable (y): Displays the first few entries of the target variable y using print(y.head())"
      ],
      "metadata": {
        "id": "pg3bXgHybHJg"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "mUe4gfJ2YLdx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "gQnChXK2VL63"
      }
    }
  ]
}